Function overloading is a feature of object oriented programming where two or more functions can have the same name but different parameters. When a function name is overloaded with different jobs it is called Function Overloading.

In Function Overloading “Function” name should be the same and the arguments should be different.
Function overloading comes under the compile-time polymorphism.

#  Why is Function overloading not possible with different return types?
-> Function overloading comes under the compile-time polymorphism. During compilation, the function signature is checked. So, functions can be overloaded, if the signatures are not the same. The return type of a function has no effect on function overloading, therefore the same function signature with different return type will not be overloaded.

Example: if there are two functions: int sum() and float sum(), these two will generate a compile-time error as function overloading is not possible here.


function overloadng is categories in three ways: 
1. Type of argument
2. Number of argument 
3. Type and number of arguments

# Type of argument --> when it nee to have same operation on different types of variable, we overload the function with different type of arguments.

# Number of argument --> baised on number of argument

# Type and number of argument --> the function with different type and other functions with different number of arguments and some other with both different type and number of argument can have the same name.