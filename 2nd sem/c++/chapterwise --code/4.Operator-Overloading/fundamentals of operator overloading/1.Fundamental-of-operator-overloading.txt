
💣→→→→ Operator Overloading:
C++ provides a special function to change the current functionality of some operators within its class which is often called as operator overloading.
Operator Overloading is the method by which we can change the function of some specific operators to do some different task.
For example,
we can overload an operator ‘+’ in a class like String so that we can concatenate two strings by just using +.
Other example classes where arithmetic operators may be overloaded are Complex Number, Fractional Number, Big Integer, etc.


This can be done by declaring the function, its syntax is,

Return_Type classname :: operator op(Argument list)
{
	Function Body
}

In the above syntax Return_Type is value type to be returned to another object,
operator op is the function where the operator is a keyword and op is the operator to be overloaded.
Operator function must be either non-static (member function) or friend function.



Operator Overloading can be done by using three approaches ie.
1. Overloading unary operator.
2. Overloading binary operator.
3. Overloading binary operator using a friend function.



Below are some criteria/rules to define the operator function:

➡️ In case of a non-static function, the binary operator should have only one argument and unary should not have an argument.
➡️ In the case of a friend function, the binary operator should have only two argument and unary should have only one argument.
➡️ All the class member object should be public if operator overloading is implemented.
➡️ Operators that cannot be overloaded are . .* :: ?:
➡️ Operator cannot be used to overload when declaring that function as friend function = () [] ->.




What is the difference between operator functions and normal functions? 
Operator functions are the same as normal functions. The only differences are, name of an operator function is always 
operator keyword followed by symbol of operator and operator functions are called when the corresponding operator 
is used. 



Can we overload all operators? 
Almost all operators can be overloaded except few. Following is the list of operators that cannot be overloaded. 

. (dot) 
:: 
?: 
sizeof 




Important points about operator overloading ::
1) For operator overloading to work, at least one of the operands must be a user defined class object.

2) Assignment Operator: Compiler automatically creates a default assignment operator with every class. 

The default assignment operator does assign all members of right side to the left side and works fine most of the cases 
(this behavior is same as copy constructor). See this for more details. 

3) Conversion Operator: We can also write conversion operators that can be used to convert one type to another type. 

4) Any constructor that can be called with a single argument works as a conversion constructor, 
means it can also be used for implicit conversion to the class being constructed. 
 